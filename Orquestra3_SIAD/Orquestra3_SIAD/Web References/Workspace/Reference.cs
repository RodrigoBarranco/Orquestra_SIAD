//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Orquestra3_SIAD.Workspace {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WorkspaceSoap", Namespace="http://www.cryo.com.br/")]
    public partial class Workspace : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ListPending01OperationCompleted;
        
        private System.Threading.SendOrPostCallback ListPending02OperationCompleted;
        
        private System.Threading.SendOrPostCallback ListPending03OperationCompleted;
        
        private System.Threading.SendOrPostCallback ListPending04OperationCompleted;
        
        private System.Threading.SendOrPostCallback ListStart01OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Workspace() {
            this.Url = global::Orquestra3_SIAD.Properties.Settings.Default.Orquestra3_SIAD_Workspace_Workspace;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ListPending01CompletedEventHandler ListPending01Completed;
        
        /// <remarks/>
        public event ListPending02CompletedEventHandler ListPending02Completed;
        
        /// <remarks/>
        public event ListPending03CompletedEventHandler ListPending03Completed;
        
        /// <remarks/>
        public event ListPending04CompletedEventHandler ListPending04Completed;
        
        /// <remarks/>
        public event ListStart01CompletedEventHandler ListStart01Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.cryo.com.br/ListPending01", RequestNamespace="http://www.cryo.com.br/", ResponseNamespace="http://www.cryo.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ListPending01(string Token) {
            object[] results = this.Invoke("ListPending01", new object[] {
                        Token});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ListPending01Async(string Token) {
            this.ListPending01Async(Token, null);
        }
        
        /// <remarks/>
        public void ListPending01Async(string Token, object userState) {
            if ((this.ListPending01OperationCompleted == null)) {
                this.ListPending01OperationCompleted = new System.Threading.SendOrPostCallback(this.OnListPending01OperationCompleted);
            }
            this.InvokeAsync("ListPending01", new object[] {
                        Token}, this.ListPending01OperationCompleted, userState);
        }
        
        private void OnListPending01OperationCompleted(object arg) {
            if ((this.ListPending01Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListPending01Completed(this, new ListPending01CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.cryo.com.br/ListPending02", RequestNamespace="http://www.cryo.com.br/", ResponseNamespace="http://www.cryo.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ListPending02(string Token, int CodFlow, string DsFlowElementAlias, int NbDaysSinceStarted) {
            object[] results = this.Invoke("ListPending02", new object[] {
                        Token,
                        CodFlow,
                        DsFlowElementAlias,
                        NbDaysSinceStarted});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ListPending02Async(string Token, int CodFlow, string DsFlowElementAlias, int NbDaysSinceStarted) {
            this.ListPending02Async(Token, CodFlow, DsFlowElementAlias, NbDaysSinceStarted, null);
        }
        
        /// <remarks/>
        public void ListPending02Async(string Token, int CodFlow, string DsFlowElementAlias, int NbDaysSinceStarted, object userState) {
            if ((this.ListPending02OperationCompleted == null)) {
                this.ListPending02OperationCompleted = new System.Threading.SendOrPostCallback(this.OnListPending02OperationCompleted);
            }
            this.InvokeAsync("ListPending02", new object[] {
                        Token,
                        CodFlow,
                        DsFlowElementAlias,
                        NbDaysSinceStarted}, this.ListPending02OperationCompleted, userState);
        }
        
        private void OnListPending02OperationCompleted(object arg) {
            if ((this.ListPending02Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListPending02Completed(this, new ListPending02CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.cryo.com.br/ListPending03", RequestNamespace="http://www.cryo.com.br/", ResponseNamespace="http://www.cryo.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ListPending03(string Token, int RecordLimit) {
            object[] results = this.Invoke("ListPending03", new object[] {
                        Token,
                        RecordLimit});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ListPending03Async(string Token, int RecordLimit) {
            this.ListPending03Async(Token, RecordLimit, null);
        }
        
        /// <remarks/>
        public void ListPending03Async(string Token, int RecordLimit, object userState) {
            if ((this.ListPending03OperationCompleted == null)) {
                this.ListPending03OperationCompleted = new System.Threading.SendOrPostCallback(this.OnListPending03OperationCompleted);
            }
            this.InvokeAsync("ListPending03", new object[] {
                        Token,
                        RecordLimit}, this.ListPending03OperationCompleted, userState);
        }
        
        private void OnListPending03OperationCompleted(object arg) {
            if ((this.ListPending03Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListPending03Completed(this, new ListPending03CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.cryo.com.br/ListPending04", RequestNamespace="http://www.cryo.com.br/", ResponseNamespace="http://www.cryo.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ListPending04(string Token, int CodFlowExecute) {
            object[] results = this.Invoke("ListPending04", new object[] {
                        Token,
                        CodFlowExecute});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ListPending04Async(string Token, int CodFlowExecute) {
            this.ListPending04Async(Token, CodFlowExecute, null);
        }
        
        /// <remarks/>
        public void ListPending04Async(string Token, int CodFlowExecute, object userState) {
            if ((this.ListPending04OperationCompleted == null)) {
                this.ListPending04OperationCompleted = new System.Threading.SendOrPostCallback(this.OnListPending04OperationCompleted);
            }
            this.InvokeAsync("ListPending04", new object[] {
                        Token,
                        CodFlowExecute}, this.ListPending04OperationCompleted, userState);
        }
        
        private void OnListPending04OperationCompleted(object arg) {
            if ((this.ListPending04Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListPending04Completed(this, new ListPending04CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.cryo.com.br/ListStart01", RequestNamespace="http://www.cryo.com.br/", ResponseNamespace="http://www.cryo.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ListStart01(string Token) {
            object[] results = this.Invoke("ListStart01", new object[] {
                        Token});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ListStart01Async(string Token) {
            this.ListStart01Async(Token, null);
        }
        
        /// <remarks/>
        public void ListStart01Async(string Token, object userState) {
            if ((this.ListStart01OperationCompleted == null)) {
                this.ListStart01OperationCompleted = new System.Threading.SendOrPostCallback(this.OnListStart01OperationCompleted);
            }
            this.InvokeAsync("ListStart01", new object[] {
                        Token}, this.ListStart01OperationCompleted, userState);
        }
        
        private void OnListStart01OperationCompleted(object arg) {
            if ((this.ListStart01Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListStart01Completed(this, new ListStart01CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void ListPending01CompletedEventHandler(object sender, ListPending01CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListPending01CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListPending01CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void ListPending02CompletedEventHandler(object sender, ListPending02CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListPending02CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListPending02CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void ListPending03CompletedEventHandler(object sender, ListPending03CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListPending03CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListPending03CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void ListPending04CompletedEventHandler(object sender, ListPending04CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListPending04CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListPending04CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void ListStart01CompletedEventHandler(object sender, ListStart01CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListStart01CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListStart01CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591